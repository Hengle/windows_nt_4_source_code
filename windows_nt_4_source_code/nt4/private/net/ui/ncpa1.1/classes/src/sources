!IF 0

!ENDIF

#
# The TARGETNAME variable is defined by the developer.  It is the name of
# the target (component) that is being built by this makefile.  It
# should NOT include any path or file extension information.
#

TARGETNAME=classes
#
# The TARGETPATH and TARGETTYPE varialbes are defined by the developer.
# The first specifies where the target is to be build.  The second specifies
# the type of target (either PROGRAM, DYNLINK or LIBRARY)
#

TARGETPATH=..\lib
TARGETTYPE=LIBRARY
USE_CRTDLL=1

#
# The INCLUDES variable specifies any include paths that are specific to
# this source directory.  Separate multiple directory paths with single
# semicolons.  Relative path specifications are okay.
#

PRECOMPILED_CXX=1
PRECOMPILED_INCLUDE=.\common.h
PRECOMPILED_OPTION=/Yu /Fp.\obj\*\common.pch
PRECOMPILED_TARGET=.\obj\*\common.pch
PRECOMPILED_OBJ=.\obj\*\common.obj

INCLUDES=..\include


#
# The SOURCES variable is defined by the developer.  It is a list of all the
# source files for this component.  Each source file should be on a separate
# line using the line continuation character.  This will minimize merge
# conflicts if two developers adding source files to the same component.
#
# Whitespace is not permitted between the SOURCES keyword and the '='.
# (Courtesy of BUILD.EXE)
#

SOURCES=strlist.cpp \
        ptrlist.cpp \
	debug.cpp \
	button.cpp \
	dialog.cpp \
	listview.cpp \
	strcore.cpp \
	strex.cpp \
	propsht.cpp \
        map_pp.cpp

C_DEFINES = $(C_DEFINES) -D_UNICODE -DBUILDING_LIB


UMTYPE=windows

#
# Defining the NTTARGETFILES variable causes MAKEFILE.DEF to attempt to
# include .\makefile.inc immediately after it specifies the top
# level targets (all, clean and loc) and their dependencies.  MAKEFILE.DEF
# also expands the value of the NTTARGETFILES variable at the end of the
# list of dependencies for the all target.  Useful for specifying additional
# targets and dependencies that don't fit the general case covered by
# MAKEFILE.DEF
#

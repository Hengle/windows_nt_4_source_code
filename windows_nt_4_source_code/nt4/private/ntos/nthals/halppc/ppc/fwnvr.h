//
//  FWNVR.H
//
//  Prototypes for FWNVR.C
//                 (automatically generated by CPROTO)
//

#ifndef	_CPROTO_FWNVR_
#define	_CPROTO_FWNVR_


#ifdef	_CPROTO_FWNVR_STATICS_
PNVR_OBJECT
nvr_alloc (
  ULONG size
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_free (
  PVOID p
);
#endif	//  _CPROTO_FWNVR_STATICS_


BOOLEAN
NvrSetSize (
  LONG		NvramSize	// size of NVRAM in bytes if non-zero
);


BOOLEAN
NvrSetMethod (
  LONG		ForcedValue	// if Non-zero, set to this value regardless
);


#ifdef	_CPROTO_FWNVR_STATICS_
UCHAR
nvr_read (
  ULONG addr
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_write (
  ULONG addr,
  UCHAR data
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_swap_Header (
  HEADER* dest,
  HEADER* src
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_headb2l (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_headl2b (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_default_nvram (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
BOOLEAN
nvr_read_nvram (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_read_GEArea (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_read_OSArea (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_read_CFArea (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_write_Header (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_write_GEArea (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_write_OSArea (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_write_CFArea (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


VOID
nvr_delete_object (
  VOID
);


#ifdef	_CPROTO_FWNVR_STATICS_
PNVR_OBJECT
nvr_create_object (
  VOID
);
#endif	//  _CPROTO_FWNVR_STATICS_


STATUS_TYPE
nvr_initialize_object (
  LONG		AccessMethod,
  ULONG		Size			// NVR size in bytes
);


#ifdef	_CPROTO_FWNVR_STATICS_
VOID
nvr_clear_nvram (
  VOID
);
#endif	//  _CPROTO_FWNVR_STATICS_


VOID
nvr_destroy (
  LONG		AccessMethod,
  ULONG		Size			// size of NVRAM
);


#ifdef	_CPROTO_FWNVR_STATICS_
ULONG
nvr_computecrc (
  ULONG oldcrc,
  UCHAR data
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
USHORT
nvr_calc1crc (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


#ifdef	_CPROTO_FWNVR_STATICS_
USHORT
nvr_calc2crc (
  PNVR_OBJECT p
);
#endif	//  _CPROTO_FWNVR_STATICS_


VOID
nvr_print_object (
  VOID
);


STATUS_TYPE
nvr_find_variable (
  PUCHAR	VarName,		// name of variable to find
  PUCHAR	ArrayAddr,		// address of variable array
  ULONG		ArraySize,		// max size of variable array
  PULONG	ni,
  PULONG	vi
);


STATUS_TYPE
nvr_set_variable (
  PUCHAR	VarName,		// name of variable to add/change
  PUCHAR	VarValue,		// value to be set into variable
  PUCHAR	ArrayAddr,		// address of variable array
  ULONG		ArraySize		// max size of variable array
);


STATUS_TYPE
nvr_find_OS_variable (
  PUCHAR var,
  PULONG ni,
  PULONG vi
);


STATUS_TYPE
nvr_find_GE_variable (
  PUCHAR var,
  PULONG ni,
  PULONG vi
);


PUCHAR
nvr_get_OS_variable (
  PUCHAR vname
);


PUCHAR
nvr_get_GE_variable (
  PUCHAR vname
);


STATUS_TYPE
nvr_set_OS_variable (
  PUCHAR vname,
  PUCHAR value
);


STATUS_TYPE
nvr_set_GE_variable (
  PUCHAR vname,
  PUCHAR value
);


PUCHAR
nvr_fetch_GE (
  VOID
);


ULONG
nvr_stat_GE (
  PULONG size
);


PUCHAR
nvr_fetch_OS (
  VOID
);


PUCHAR
nvr_fetch_CF (
  VOID
);


VOID
NvrCopyFill (
  PVOID		src,
  ULONG		srclen
);


#endif	//  _CPROTO_FWNVR_

;***********************************************************************
;
; OEMSETUP.INF
;
;
;       IRMINI serial infrared reference driver INF.
;
; History:
;
;       Author(s)       Geeky Euro-date	    Action
;       ---------       ---------------     ------
;       davidhov        00-Feb-1992         Created
;       terryk          27-Feb-1992         Reorganize section location
;                                           added comment
;       terryk          03-Mar-1992         Changed to Elink II setup
;       terryk          02-Apr-1992         Code review changed
;       davidhov        03-Apr-1992         Enhanced to use new INF section
;                                           structure from SunilP, et al.
;       davidhov        06-Dec-1992         Netcard Detection
;       robertn         02-Jul-1993         Changed for Xircom PE3 without detect
;       davidlao        28-jun-1995         Added help file.
;	aarono,ervinp	18-jun-1996	    Modified for IRMINI
;
;
;***********************************************************************

;-----------------------------------------------------------------------
; OPTION TYPE
; -----------
; This identifies the Option type we are dealing with.  The different
; possible types are:
;
; COMPUTER, DISPLAY, MOUSE, KEYBOARD, LAYOUT, SCSI, PRINTER, ...
;
;  Types specific to networking:
;
; NetAdapter,        a netcard / adapter combination or just a netcard
; NetDriver,         just a netcard driver
; NetTransport,      a complete NDIS-compliant TDI transport stack
; NetService,        an NT networking service
; NetWork,           a complete network ensemble.
; NetProvider        a complete network which supports NT MPR protocol
;-----------------------------------------------------------------------

[Identification]
    OptionType = NetAdapter

;-----------------------------------------------------------------------
; PlatformsSupported
; ------------------
; This identifies the platforms supported by the adapter card.
; Possible types are:
;
; ISA
;-----------------------------------------------------------------------

[PlatformsSupported]
    ISA

;-----------------------------------------------------------------------
; LANGUAGES SUPPORTED
; -------------------
;
; The languages supported by the OEM INF, For every language supported
; we need to have a separate text section for every displayable text
; section.
;
;-----------------------------------------------------------------------

[LanguagesSupported]
    ENG

;-----------------------------------------------------------------------
; OPTION LIST
; -----------
; This section lists the OEM Option key names.  These keys are locale
; independent and used to represent the option in a locale independent
; manner.
;
;-----------------------------------------------------------------------

[Options]
    IRMINI

;-----------------------------------------------------------------------
; OPTION TEXT SECTION
; -------------------
; These are text strings used to identify the option to the user.  There
; are separate sections for each language supported.  The format of the
; section name is "OptionsText" concatenated with the Language represented
; by the section.
;
;-----------------------------------------------------------------------

[OptionsTextENG]
    IRMINI = "IRMINI Serial Infrared Port"

;***********************************************************************
; CONSTANTS FOR USING DIALOGS
;***********************************************************************

[FileConstants]

;
;  File names, etc.
;
UtilityInf      = "UTILITY.INF"
ParamInf        = "NCPARAM.INF"
subroutineinf   = "SUBROUTN.INF"
SoftwareType    = "driver"
Exit_Code       = 0

;
; EventLog Message File
;
NetEventDLL     = "%SystemRoot%\System32\netevent.dll;%SystemRoot%\System32\Drivers\irmini.sys"
IoLogMsgDLL     = "%SystemRoot%\System32\IoLogMsg.dll"

; Product Info
;
Manufacturer    = "Microsoft"
ProductMajorVersion     = "4"
ProductMinorVersion     = "0"
ProductVersion  = $(ProductMajorVersion)"."$(ProductMinorVersion)
;
; Software
;
ProductSoftwareName     = "IRMINI"
ProductSoftwareTitle    = "IRMINI Serial Infrared Port Driver"
ProductSoftwareImagePath = "\SystemRoot\System32\drivers\irmini.sys"
NetRuleSoftwareType     = "IrminiSys ndisDriver irminiDriver"
NetRuleSoftwareUse      = $(SoftwareType)
NetRuleSoftwareBindForm = """IrminiSys"" yes no container"
NetRuleSoftwareClass    = {"irminiDriver basic"}
NetRuleSoftwareBindable = {"irminiDriver irminiAdapter non exclusive 100"}
;
; Hardware
;
ProductHardwareName     = "Irmini"
ProductHardwareIRMINITitle    = "IRMINI Serial Infrared Port Driver"
NetRuleHardwareType     = "irmini irminiAdapter"
NetRuleHardwareBindForm = " yes yes container"
NetRuleHardwareClass    = {"irminiAdapter basic"}
;
; Registry Key
;
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\"$(ProductSoftwareName)"\CurrentVersion"
ParamKeyName    = $(!NTN_ServiceBase)"\"$(ProductHardwareName)"\Parameters"


[GeneralConstants]
;
;  Program flow control variables.
;
from      = ""
to        = ""
;
;  Return codes; Exit_Code is set to one of these
;
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2

;BUGBUG: don't know what MAXIMUM_ALLOWED means
KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""

TRUE            = 1
FALSE           = 0
NoTitle            = 0

ExitState   = "Active"
OldVersionExisted = $(FALSE)

DriverPath      = $(!STF_NTPATH)\drivers

;***********************************************************************
; Language-Dependent Dialog Constants
;***********************************************************************

[FileConstantsENG]
;
;  Variables to support thermometer gauge and error dialogs
;
ProCaption   = "Windows NT Setup"
ProCancel    = "Cancel"
ProCancelMsg = "Windows NT Networking is not correctly installed.  "+
               "Are you sure you want to cancel copying files?"

ProCancelCap = "Network Setup Message"
ProText1     = "Copying:"
ProText2     = "To:"

;
; Product Info
;
FunctionTitle   = "IRMINI Serial Infrared Port Setup"
;
; Software
;
ProductSoftwareDescription          = "IRMINI Serial Infrared Port Driver"
;
; Hardware
;
ProductHardwareIRMINIDescription    = "IRMINI Serial Infrared Port Adapter"

[DialogConstantsENG]
;
; Common button names, etc.
;
;BUGBUG: remove or resolve help issues.
Help        = "&Help"
Exit        = "Cancel"
OK          = "OK"
HelpContext = ""
Continue    = "Continue"
Cancel      = "Cancel"

[date]
    ; Now is a list which contains { Sec from 1-1-1970, Year, Month, Day, Hour,
    ; Minute, Second }
    Now = {} ? $(!LIBHANDLE) GetSystemDate


;-----------------------------------------------
; Input DIALOGS
;-----------------------------------------------

[FileDependentDlgENG]

DlgType = "MultiCombo"

; BUGBUG ??? DlgTemplate = "NE2000"
DlgTemplate = "UBNDIS"

Caption = $(FunctionTitle)

DlgText = "Please select values for the following fields:"

Label1 = "&IRQ Level:"
Label2 = "I/&O Port Address:"
Label3 = "&Transceiver Type:"

Combo1List = $(IRQ_List)
Combo1Out  = $(IRQ_Level)
Combo2List = $(IOADDR_Hex_List)
Combo2Out  = $(IOADDR_Hex_Value)
Combo3List = $(TRANSCEIVER_TYPE_List)
Combo3Out  = $(TRANSCEIVER_TYPE_Str)


ComboListItemsIn  = {Combo1List, Combo2List, Combo3List}
ComboListItemsOut = {Combo1Out, Combo2Out, Combo3Out}

EditTextIn = ""
EditTextLim = ""
CBOptionsGreyed = {}
NotifyFields = {NO, NO, NO}

HelpContext = 100

;---------------------------------------------------------------------------
; 1. Identify
;
; DESCRIPTION:   To verify that this INF deals with the same type of options
;                as we are choosing currently.
;
; INPUT:         None
;
; OUTPUT:        $($R0): STATUS: STATUS_SUCCESSFUL
;                $($R1): Option Type (COMPUTER ...)
;                $($R2): Diskette description
;---------------------------------------------------------------------------

[Identify]
    Set !G:DebugOutputControl = 1
    Set !DebugOutputControl = 1
    Set !STF_DISPLAYDEBUGOUTPUT = 1
    Debug-Output $(STF_CONTEXTINFNAME)": Calling Identification"
    ;
    ;
    read-syms Identification
    Debug-Output $(STF_CONTEXTINFNAME)": Identification set OptionType = "$(OptionType)

    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)

    Debug-Output $(STF_CONTEXTINFNAME)": Identify returning Status = "$(Status)", Identifier = "$(Identifier)", Media = "$(Media)
    
    Return $(Status) $(Identifier) $(Media)

;------------------------------------------------------------------------
; 2. ReturnOptions:
;
; DESCRIPTION:   To return the option list supported by this INF and the
;                localised text list representing the options.
;
;
; INPUT:         $($0):  Language used. ( ENG | FRN | ... )
;
; OUTPUT:        $($R0): STATUS: STATUS_SUCCESSFUL |
;                                STATUS_NOLANGUAGE
;                                STATUS_FAILED
;                                STATUS_NOTSUPPORTED
;
;                $($R1): Option List
;                $($R2): Option Text List
;------------------------------------------------------------------------

[ReturnOptions]
    ;
    ;
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}

    ;
    ; Check if the language requested is supported
    ;
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
        ;
        ; Check if the platforms requested is supported
        ;
        ifstr(i) $($1) == ""
                        goto returnoptions
        endif

        set PlatformList = ^(PlatformsSupported, 1)
        Ifcontains(i) $($1) in $(PlatformList)
                        goto returnoptions
        else
                        set Status = STATUS_NOTSUPPORTED
                        goto finish_ReturnOptions
        endif
    else
                set Status = STATUS_NOLANGUAGE
                goto finish_ReturnOptions
    endif

    ;
    ; form a list of all the options and another of the text representing
    ;

returnoptions = +
    set OptionList     = ^(Options, 1)
    set OptionTextList = ^(OptionsText$($0), 1)
    set Status         = STATUS_SUCCESSFUL

finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)

;------------------------------------------------------------------------
;
; InstallOption:
;
;      This section is shelled to by main installation processing
;      or by NCPASHEL.INF during reconfig, removal, update, etc.
;
;
; FUNCTION:  To copy files representing Options
;            To configure the installed option
;            To update the registry for the installed option
;
; INPUT:     $($0):  Language to use
;            $($1):  OptionID to install
;            $($2):  SourceDirectory
;            $($3):  AddCopy  (YES | NO)
;            $($4):  DoCopy   (YES | NO)
;            $($5):  DoConfig (YES | NO)
;
; OUTPUT:    $($R0): STATUS: STATUS_SUCCESSFUL |
;                            STATUS_NOLANGUAGE |
;                            STATUS_USERCANCEL |
;                            STATUS_FAILED
;
;------------------------------------------------------------------------
[InstallOption]
    ;
    ; Set default values for
    ;
    set Status   = STATUS_FAILED
    ;
    ; extract parameters
    ;
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)

    ;
    ; Check if the language requested is supported
    ;
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
        Return STATUS_NOLANGUAGE
    endif

    set-subst LF = "\n"

    read-syms GeneralConstants
    read-syms FileConstants

	; BUGBUG: What is NCPA??

    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
        set Continue = "OK"
    endif
    read-syms FileConstants$(!STF_LANGUAGE)

    detect date

    set-title  $(FunctionTitle)

    set to   = Begin
    set from = Begin
;
;  Assume all is well.
;
    set CommonStatus = STATUS_SUCCESSFUL

    EndWait

;
;   Set up the operation-mode-based variables and gaily welcome
;   the user.  If the "install mode" variable is improperly set,
;   assume this is a new installation.
;
;BUGBUG: calls out to shell, what is it doing?
Begin = +
    Set ActivateDetection = FALSE

    Ifstr(i) $(!NTN_InstallMode) == deinstall
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else-Ifstr(i) $(!NTN_InstallMode) == configure
        set ActivateDetection = TRUE
        set StartLabel = configureadapter
        ;
        ;   You cannot config the software component
        ;
        Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
            Debug-Output "Cannot configure the NI6510 driver software."
            Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
                Debug-Output "ShellCode error: cannot get an error string."
                goto ShellCodeError
            endif
            set Error = $($R0)
            set from = end
            set to = end
            goto nonfatalinfo
        endif
    else
        set ActivateDetection = TRUE
        set StartLabel = installadapter
        set OEM_ABANDON_OPTIONS = {}
        set OEM_ABANDON_SOFTWARE = FALSE
        set OEM_ABANDON_ON = TRUE
    endif


    ;===================================================
    ;  Netcard Detection logic
    ;
    ;  Initialize use of netcard detection;
    ;  Construct require global parameter variables
    ;
    Debug-Output "OEMSETUP.INF: =================================================="
    Debug-Output "OEMSETUP.INF: STF_CWDIR is: "$(!STF_CWDIR)
    Debug-Output "OEMSETUP.INF: STF_LANGUAGE is: "$(!STF_LANGUAGE)
    Debug-Output "OEMSETUP.INF: Option is: "$(Option)
    Debug-Output "OEMSETUP.INF: !STF_NCDETECT  is: "$(!STF_NCDETECT)
    Debug-Output "OEMSETUP.INF: !STF_NCOPTION  is: "$(!STF_NCOPTION)
    Debug-Output "OEMSETUP.INF: !STF_NCDETCARD is: "$(!STF_NCDETCARD)
    Debug-Output "OEMSETUP.INF: !STF_NCDETINFO is: "$(!STF_NCDETINFO)
    Debug-Output "OEMSETUP.INF: =================================================="

    Set DetectedCard = FALSE

    Ifstr(i) $(ActivateDetection) != TRUE
        Goto $(StartLabel)
    Endif
    ;
    ;  Set !STF_NC_PARAMS and !STF_NC_PNAMES by calling
    ;    PARAM.INF!Param_BuildTypeLists.
    ;   Pass it a list of the form:
    ;
    ;   {  { <param name>,
    ;        <name of choice list var>,
    ;        <name of default var> },
    ;      ...
    ;   }
    ;
    Set TypeList = {{IRQ, IRQ_List, IRQ_Level},+
                    {IOADDR, IOADDR_Addr_List, IOBaseAddrValue},+
                    {TRANSCEIVER_TYPE, TRANSCEIVER_TYPE_List, TRANSCEIVER_TYPE_Value}}

    Debug-Output "OEMSETUP.INF: Calling Param_BuildTypeLists"
;    Shell $(ParamInf) Param_BuildTypeLists $(Option) $(TypeList)
;    Set Status = $($R0)
;    ifstr(i) $(Status) != STATUS_SUCCESSFUL
;        Goto fataldetect
;    Endif
;
; The following code performs the same as above Param_BuildTypeLists
;
    Set IRQ_List = { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 }
    Set IOADDR_Addr_List = { 744, 760, 1000, 1016 }


    Set TRANSCEIVER_TYPE_List = { 	"Standard UART",+
					"ESI-9680 JetEye",+
					"ActiSys 220L",+
					"Crystal",+
					"Adaptec AIRport2000",+
					"PARALLAX",+
					"NSC PC87108 demo bd" }

    Set !STF_NC_PARAMS = { { "IRQ", 1, 0, { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 } },+ 
                           { "IOADDR", 1, 0, { 744, 760, 1000, 1016 } },+
                           { "TRANSCEIVER_TYPE", 1, 0, {"Standard UART",+
							"ESI-9680 JetEye",+
							"ActiSys 220L",+
							"Crystal",+
							"Adaptec AIRport2000",+
							"PARALLAX",+
							"NSC PC87108 demo bd"  } } }
    Set !STF_NC_PNAMES = { { "IRQ", "IRQ_Level", 4 },+
                           { "IOADDR", "IOBaseAddrValue", 1016 },+
                           { "TRANSCEIVER_TYPE", "TRANSCEIVER_TYPE_Value", 0 } }
    Set !p:IRQ = { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 }
    Set !p:IOADDR = { 744, 760, 1000, 1016 }

    Set !p:TRANSCEIVER_TYPE = {	"Standard UART",+
				"ESI-9680 JetEye",+
				"ActiSys 220L",+
				"Crystal",+
				"Adaptec AIRport2000",+
				"PARALLAX",+
				"NSC PC87108 demo bd" }


;
; End of additional code
;
    Debug-Output "OEMSETUP.INF: Calling Param_SetDefaults"
    Shell $(ParamInf) Param_SetDefaults {}

    ;  Establish presentation versions of choice lists.

    Shell $(ParamInf) HexListFromDecList $(IOADDR_Addr_List)
    Set IOADDR_Hex_List = $($R0)

    ;  If this is a detected card, set the flag.

    Ifstr(i) $(!STF_NCDETECT) == YES
        Ifstr(i) $(!STF_NCOPTION) == $(Option)
           Set DetectedCard = TRUE
           Debug-Output "OEMSETUP.INF: Setting DetectedCard to TRUE"
        Endif
    Endif
    ;
    ;  End Netcard Detection logic
    ;===================================================

    Shell "" DebugConfiguration "After parameter querying"

    Set from = $(fatal)
    Set to = $(fatal)
    Goto $(StartLabel)

;-----------------------------------------------
; Installation Section
;-----------------------------------------------

installadapter = +
;
;   First, check whether the same version of the software exists
;
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct

    Ifstr $(KeyProduct) != $(KeyNull)
        ;
        ; Same version already existed in the local machine
        ; Popup the dialog and ask the user whether he wants to continue
        ;
        CloseRegKey $(KeyProduct)

        ifstr(i) !(NTN_RegBase) == $(ProductKeyName)
           ;
           ; Cannot Install the same software again
           ;
           Shell $(UtilityInf), VerExistedDlg, $(ProductSoftwareTitle),+
               $(ProductVersion)
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "ShellCode error: cannot get an error string."
               goto ShellCodeError
           endif

           goto end
        else
           ;
           ; Add a new adapter card?
           ;
           Shell $(UtilityInf), CardExistedDlg

           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "ShellCode error: cannot get an error string."
               goto ShellCodeError
           endif

           ifstr(i) $($R1) != "OK"
               goto end
           endif
           set OldVersionExisted = $(TRUE)
        endif
    endif

    Install "Install-Option"
    ;===================================================
    ;  Netcard Detection logic
    ;
    ;   If this is a detected card, query its parameters
    ;   and merge them into the default list.
    ;
    ;BUGBUG: detecting PCMCIA card ranges, probably needs to be removed.
    Ifstr(i) $(DetectedCard) != TRUE
        Goto adaptersetup
    Endif
    ;
    ;   Get the detected parameters
    ;
    StartWait
    Shell $(ParamInf) Param_QueryCard $(!STF_NCDETCARD)
    EndWait
    Ifstr(i) $($R0) != STATUS_SUCCESSFUL
        Goto adaptersetup
    Endif
    ;
    ;   Merge the detected values in.
    ;
    Set DetectedParams = $($R1)
    Debug-Output "OEMSETUP.INF: Calling Param_SetDefaults to merge detected params"
    Shell $(ParamInf) Param_SetDefaults $(DetectedParams)
    ;
    ;  End Netcard Detection logic
    ;===================================================

    goto adaptersetup

;-----------------------------------------------
; Configuration Section
;-----------------------------------------------
;
;   Get the current values of all the parameters
;
configureadapter = +
    Ifstr $(KeyProduct) == $(KeyNull)
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) $(MAXIMUM_ALLOWED) KeyProduct
        Ifstr $(KeyProduct) == $(KeyNull)
            set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
            Debug-Output "Cannot find component product key"
            goto fatalregistry
        Endif
    Endif

    ;
    ; Get the other parameters;  they're attached to the service parameters key
    ;
    Debug-Output "INF: Shelling to FindService"
    Shell $(UtilityInf) FindService, $(KeyProduct)
    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "INF: FindService shell failure"
        Goto ShellCodeError
    Endif
    Ifstr(i) $($R0) != NO_ERROR
        Debug-Output "INF: FindService Shell error: "$($R0)
        Goto fatalregistry
    endif

    Set KeyParameters = $($R2)

    ;
    ;  We don't need the services key, so close it.
    ;
    CloseRegKey $($R1)

    Ifstr $(KeyParameters) == $(KeyNull)
        set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
        Debug-Output "Cannot find component service"
        goto fatalregistry
    endif

    set OldVersionExisted = $(TRUE)

    set ValueName = ""
    set ValueData = ""
    set ValueStr  = ""
    set ValueList = {}

        ;
    ; Get the old values
    ;
    EnumRegValue $(KeyParameters) ValueList

    ForListDo $(ValueList)
        set ValueItem = $($)
        set ValueName = *($(ValueItem),1)
        set ValueData = *($(ValueItem),4)

        Ifstr(i) $(ValueName) == "INTERRUPT"
            set IRQ_Level = $(ValueData)
        else-Ifstr(i) $(ValueName) == "IOADDRESS"
            set IOBaseAddrValue = $(ValueData)
        else-Ifstr(i) $(ValueName) == "InfraredTransceiverType"
       	    set TRANSCEIVER_TYPE_Value = $(ValueData)
        endif

    EndForListDo
;
;   Put up the adapter configuration dialog if necessary.
;
adaptersetup = +

    Shell "" DebugConfiguration "before displaying dialog"

    Set from = adapteroptions

    Set IOADDR_Hex_Value = *($(IOADDR_Hex_List), ~($(IOADDR_Addr_List),$(IOBaseAddrValue)))

    ;
    ;  Lists are indexed from one, so add one to our zero-based index.
    ;  Then select the current entry in the list we're about to display.
    ;
    set-add TRANSCEIVER_TYPE_Value = $(TRANSCEIVER_TYPE_Value), 1
    set TRANSCEIVER_TYPE_Str = *($(TRANSCEIVER_TYPE_List), $(TRANSCEIVER_TYPE_Value))

    ;===================================================
    ;  Netcard Detection logic
    ;
    ;   Check that this card's parameters can be
    ;   fully detected.
    ;
    ; BUGBUG: network detection logic.
    Shell $(ParamInf) Param_ParameterConfidence
    Ifstr(i) $($R0) != STATUS_SUCCESSFUL
        Debug-Output "OEMSETUP.INF: parameter confidence too low to bypass configuration"
        Goto adapteroptions
    Endif
    ;
    ;   If this is a detected card and we're in EXPRESS mode,
    ;   see if the parameters as they currently exist are
    ;   verifiably correct.
    ;
    Ifstr(i) $(DetectedCard) == TRUE
        Ifstr(i) $(!STF_INSTALL_MODE) != CUSTOM
            Goto adapterverify
        Endif
    Endif
    ;
    ;  End Netcard Detection logic
    ;===================================================

adapteroptions = +

	;BUGBUG: write a help file
    ;sethelpfile "xpe3.hlp" 100 100

    read-syms FileDependentDlg$(!STF_LANGUAGE)

    ui start "InputDlg"

    ifstr(i) $(DLGEVENT) == "CONTINUE"
        set IRQ_Level = $(Combo1Out)
        set IOADDR_Hex_Value = $(Combo2Out)

	; Lists are indexed starting from 1, so subtract 1 to get our index
        set TRANSCEIVER_TYPE_Value = ~($(TRANSCEIVER_TYPE_List),$(Combo3Out))
	set-sub TRANSCEIVER_TYPE_Value = $(TRANSCEIVER_TYPE_Value),1

        Set IOBaseAddrValue = *($(IOADDR_Addr_List), ~($(IOADDR_Hex_List),$(IOADDR_Hex_Value)))

        ui pop 1
    else-ifstr(i) $(DLGEVENT) == "BACK"
        set CommonStatus = STATUS_USERCANCEL
        Debug-Output "Action: exit. Bye."
        ui pop 1
        goto end
    else
        Debug-Output "Action: unknown. Bye."
        ui pop 1
        goto end
    endif

adapterverify = +

    Shell "" DebugConfiguration "after running dialog"

    ;===================================================
    ;  Netcard Detection logic
    ;
    ;   If this is a detected card, attempt to validate the options
    ;
    ;BUGBUG: no detection?
    Ifstr(i) $(DetectedCard) != TRUE
        Goto skipoptions
    Endif

    Debug-Output "OEMSETUP.INF: Calling Param_VerifyCard"
    Shell $(ParamInf) Param_VerifyCard $(!STF_NCDETCARD)
    Ifstr(i) $($R0) == STATUS_SUCCESSFUL
        Debug-Output "OEMSETUP.INF: Param_VerifyCard succeeded"
        Goto skipoptions
    Endif
    ;
    ;   Give the user a chance to retry or force the options given.
    ;
    Set from = adapteroptions
    Set to = skipoptions
    Shell $(UtilityInf),RegistryErrorString,VERIFY_WARNING
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error: cannot get an error string."
        goto ShellCodeError
    endif
    set Error = $($R0)
    Goto Warning
    ;
    ;  End Netcard Detection logic
    ;===================================================

;
;   If installing, go create the necessary keys;
;   if configuring, they're already open.
;
skipoptions =+

    ifint $(OldVersionExisted) == $(TRUE)
        ifstr(i) $(!NTN_InstallMode) == configure
            goto writeparameters
        endif
    endif
    StartWait
    ;
    ; Add Software Component
    ;
    ifint $(OldVersionExisted) == $(FALSE)
        ifstr(i) $(!NTN_InstallMode) == "install"
           Ifstr(i) $(DoCopy) == "YES"

              Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES

              Ifint $($ShellCode) != $(!SHELL_CODE_OK)
                  Goto ShellCodeError
              Else-Ifstr(i) $($R0) == STATUS_FAILED
                  Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
                  ifint $($ShellCode) != $(!SHELL_CODE_OK)
                      goto ShellCodeError
                  endif
                  set Error = $($R0)
                  Goto fatal
              Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
                  Goto successful
              Endif

              Set SrcDir = $($R1)

           Endif

           ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
              Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
              ifint $($ShellCode) != $(!SHELL_CODE_OK)
                  goto ShellCodeError
              endif
              set Error = $($R0)
              goto fatal
           endif
        endif

        Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), +
            $(ProductSoftwareName), +
            $(ProductSoftwareTitle), $(STF_CONTEXTINFNAME), +
            $(ProductSoftwareImagePath), "kernel", "NDIS", {}, "",+
            $(NetEventDLL)

        Set OEM_ABANDON_SOFTWARE = TRUE

        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif
        ;
        ;   At this point:
        ;     $R1 contains the product version key handle;
        ;     $R2 contains the NetRules subkey handle;
        ;     $R3 contains the new Services key handle; and
        ;     $R4 contains the Parameters key
        ;     $R5 contains the Linkage Key
        ;
        set RegistryErrorIndex = $($R0)
        set KeyProduct      = $($R1)
        Set SoftNetRulesKey = $($R2)
        CloseRegKey $($R3)
        CloseRegKey $($R4)
        CloseRegKey $($R5)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Registry error: add software components"
            CloseRegKey $(KeyProduct)
            CloseRegKey $(SoftNetRulesKey)
            goto fatalregistry
        endif

        set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
                           {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                           {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                           {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareTitle)},+
                           {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareDescription)},+
                           {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareName)},+
                           {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}

        Shell  $(UtilityInf), AddValueList, $(KeyProduct), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Registry error: add value list."
            CloseRegKey $(KeyProduct)
            CloseRegKey $(SoftNetRulesKey)
            goto fatalregistry
        endif

        set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareType)},+
                            {use,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareUse)}, +
                            {bindform,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareBindForm)}, +
                            {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareClass)}, +
                            {bindable,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareBindable)}, +
                            {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}

        Shell  $(UtilityInf), AddValueList, $(SoftNetRulesKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        CloseRegKey $(KeyProduct)
        CloseRegKey $(SoftNetRulesKey)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Registry error: add value list."
            goto fatalregistry
        endif
    endif
;
;   Create the HARDWARE\Netcard region and its corresponding service
;
    Shell $(UtilityInf), AddHardwareComponent, $(ProductHardwareName),$(STF_CONTEXTINFNAME),$(ProductKeyName)

    ifint $($R4) != -1
        Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(!NTN_SoftwareBase)"\Microsoft\Windows NT\CurrentVersion\NetworkCards\"$($R4))
    endif

    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "Cannot add hardware component"
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "Registry error: add hardware component"
        CloseRegKey $($R1)
        CloseRegKey $($R2)
        CloseRegKey $($R3)
        goto fatalregistry
    endif

;
;   At this point:
;     $R1  Registry key variable for HARDWARE\Netcard\(n)
;     $R2  Registry key variable for HARDWARE\Netcard\(n)\\NetRules
;     $R3  Registry key handle for <service>\Parameters key
;     $R4  Adapter number assigned to adapter
;     $R5  Service name generated by combining svc name with adapter number
;
    set KeyParameters = $($R3)
    set KeyAdapterRules = $($R2)
    set AdapterNumber = $($R4)

    set NewValueList = {{Manufacturer,$(NoTitle),$(!REG_VT_SZ),$(Manufacturer)},+
                       {Title,$(NoTitle),$(!REG_VT_SZ),"["$($R4)"] "$(ProductHardware$(Option)Title)},+
                       {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductHardware$(Option)Description)},+
                       {ProductName,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareName)},+
                       {ServiceName,$(NoTitle),$(!REG_VT_SZ),$($R5)},+
                       {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}

    Shell  $(UtilityInf), AddValueList, $($R1), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error"
        goto ShellCodeError
    endif

    CloseRegKey $($R1)

    set TempProdName = """"$(ProductHardwareName)$(AdapterNumber)""""
    set TempBindForm = $(TempProdName)$(NetRuleHardwareBindForm)

    set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleHardwareType)},+
                        {bindform,$(NoTitle),$(!REG_VT_SZ),$(TempBindForm)}, +
                        {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleHardwareClass)}, +
                        {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}

    Shell  $(UtilityInf), AddValueList, $(KeyAdapterRules), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error."
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "Registry error: add value list."
        CloseRegKey $(KeyParameters)
        CloseRegKey $(KeyAdapterRules)
        goto fatalregistry
    endif

    CloseRegKey $(KeyAdapterRules)

    goto writeparameters
;
;   REQUIRED:   $(KeyParameters) contains service Parameters key handle
;
writeparameters = +
    Shell $(UtilityInf), GetBusTypeNum
    set BusTypeNum = $($R1)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error."
        goto ShellCodeError
    endif
;
;   Add the rest of the parameters to the Services area
;
    Set NewValueList = {{BusType,$(NoTitle),$(!REG_VT_DWORD),$(BusTypeNum)},+
                       {BusNumber,$(NoTitle),$(!REG_VT_DWORD),0},+
                       {MediaType,$(NoTitle),$(!REG_VT_DWORD),1},+
                       {INTERRUPT,$(NoTitle),$(!REG_VT_DWORD),$(IRQ_Level)},+
                       {IOADDRESS,$(NoTitle),$(!REG_VT_DWORD),$(IOBaseAddrValue)},+
                       {InfraredTransceiverType,$(NoTitle),$(!REG_VT_DWORD),$(TRANSCEIVER_TYPE_Value)},+
                       {VerboseStatus,$(NoTitle),$(!REG_VT_DWORD),1}}



    Shell  $(UtilityInf), AddValueList, $(KeyParameters), $(NewValueList)

    CloseRegKey $(KeyParameters)

    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error."
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        Debug-Output "Registry error: Add value list"
        goto fatalregistry
    endif

    EndWait

    goto successful

;-----------------------------------------------
; Binding section
;-----------------------------------------------
bindingadapter =+
    set Error = "Binding: Sorry, not yet implemented."
    goto fatal

;-----------------------------------------------
; Removeadapter section
;-----------------------------------------------

removeadapter = +
    Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        ; Remove Software Component
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    else
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), $(!NTN_RegBase)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    endif

    goto end

;-----------------------------------------------
; Upgrade Software section
;-----------------------------------------------

UpgradeSoftware = +
    ;
    ; First determine whether we want to do upgrade or update for software
    ; or hardware component. Then we will determine whether the Mode is
    ; update or upgrade.
    ;
    ; If the same version of the product existed in the registry, we do
    ; update. Otherwise, we will do a upgrade
    ;
    ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        ; Upgrade software component
        ;
        ; see whether the same version exist or not
        ;
        OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct

        Ifstr $(KeyProduct) != $(KeyNull)
            GetRegValue $(KeyProduct),"MajorVersion", VersionInfo
            set Version = *($(VersionInfo), 4)

            ;
            ; Update the binaries
            ;
            Split-String $(!NTN_Infname), "\", FilenameList
            QueryListSize ListSize $(FilenameList)
            set !UG_Filename = *($(FilenameList), $(ListSize))

            install "Install-Update"
            ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
                goto fatal
            endif

            ; Upgrade the version number
            ;
            SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
            SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}

            ;
            ; do nothing for update
            ;
            ifint $(Version) != $(ProductVersion)
               ;
               ; If the major version number is not the same,
               ; it is major upgrade. So let Upgrade the product
               ;
               ;
               ; make other upgrade change if necessary
               ;
            endif
            CloseRegKey $(KeyProduct)
        else
            ;
            ; Cannot Open software key, goto ERROR
            ;
            goto fatalregistry
        endif
    else
        ;
        ; upgrade/update hardware component
        ; There is no different between upgrade and update for hardware
        ; component
        ;
        ; 1. Get the Service Name
        ; 2. Change the NetRule section if necessary
        ;
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) +
              $(MAXIMUM_ALLOWED) NetworkCardKey
        Ifstr(i) $(NetworkCardKey) != $(KeyNull)
            ;
            ; Get Service name
            ;
            GetRegValue $(NetworkCardKey),"ServiceName", ServiceNameInfo
            set ServiceName = *($(ServiceNameInfo), 4)

            ;
            ; Change the NetRule if necessary
            ;
            OpenRegKey $(NetworkCardKey) "" "NetRules" +
                $(MAXIMUM_ALLOWED) NetRuleKey
            Ifstr(i) $(NetRuleKey) != $(KeyNull)
                ;
                ; Make the change....
                ;
            else
                ;
                ; Error, cannot open net rules key
                ;
                goto fatalregistry
            endif

            CloseRegKey $(NetRules)
            CloseRegKey $(NetworkCardKey)
        else
            ;
            ; Error, cannot open network card key
            ;
            goto fatalregistry
        endif
        ;
        ; 3. Change the service section of the hardware. i.e.,
        ;    ParameterName change, value change, etc.
        ;
        OpenRegKey $(!REG_H_LOCAL) "" +
              $(!NTN_ServiceBase)"\"$(ServiceName) +
              $(MAXIMUM_ALLOWED) ServiceKey

        Ifstr(i) $(ServiceKey) != $(KeyNull)
            ;
            ; Get the ServiceKey to change the Start value
            ; or Type value. Or open Parameters key to
            ; change the hardware parameters if necessary.
            ;
            CloseRegKey $(ServiceKey)
        else
            ;
            ; Error, cannot open network card key
            ;
            goto fatalregistry
        endif
    endif

    goto end
    ;
    ; End of Upgrade Software
    ;

;
;  Escape hatches
;
successful = +
    goto end

abandon = +
    ForListDo $(OEM_ABANDON_OPTIONS)
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), $($)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    EndForListDo

    Ifstr(i) $(OEM_ABANDON_SOFTWARE) == TRUE
        ; Remove Software Component
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), FALSE
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    endif

    goto end

;
; warning display
;
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
        goto "end"
    endif
;
; non fatal error display
;
nonfatalinfo = +
    Set Severity = STATUS
    Set CommonStatus = STATUS_USERCANCEL
    goto nonfatalmsg
nonfatal = +
    Set Severity = NONFATAL
    goto nonfatalmsg
nonfatalmsg = +
    ifstr(i) $(Error) == ""
        Set Severity = NONFATAL
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), $(Severity), $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(from)
    else
        goto "end"
    endif

;
;  Registry is broken
;
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
;
;  Netcard detection failure
;
fataldetect = +
    Shell $(UtilityInf),RegistryErrorString,CANNOT_DETECT
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error: cannot get an error string."
        goto ShellCodeError
    endif
    set Error = $($R0)
    Goto fatal
;
; fatal error display
;
fatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif

    goto setfailed

;
;  Shelling error
;
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = "Error: "$(FunctionTitle)
    set STF_MB_TEXT  = "Shell Code Error"
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed

setfailed = +
    set CommonStatus = STATUS_FAILED
    ;
    ; if OEM_ABANDON_ON == TRUE, then remove the registry entries
    ;
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
        set OEM_ABANDON_ON = FALSE
        goto abandon
    endif
    goto end

end = +
    goto term

term = +

    Return $(CommonStatus)

[DebugConfiguration]

    Set InfName = "OEMSETUP.INF"
    Debug-Output $(InfName)" **CONFIGURATION STATE: "$($0)
    Debug-Output $(InfName)" IRQ_Level is "$(!p:IRQ_Level)
    Debug-Output $(InfName)" IOBaseAddrValue is "$(!p:IOBaseAddrValue)
    Debug-Output $(InfName)" TRANSCEIVER_TYPE_Value is "$(!p:TRANSCEIVER_TYPE_Value)

    return


;***************************************************************
;  INSTALL SECTIONS
;***************************************************************
[Install-Option]
    set STF_VITAL = ""

    ifstr(i) $(AddCopy) == "YES"
        AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
        AddSectionFilesToCopyList Files-Help $(SrcDir) $(!STF_WINDOWSSYSPATH)
    endif

    ifstr(i) $(DoCopy) == "YES"
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList

    endif

    Exit

[Install-Update]
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   ;set STF_VERSION     = "YES"

   AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
   AddSectionFilesToCopyList Files-Inf $(SrcDir) $(!STF_WINDOWSSYSPATH)

   set !STF_NCPA_FLUSH_COPYLIST = TRUE
   CopyFilesInCopyList

   exit

[Source Media Descriptions]
    1  = "Fast Infrared setup disk"

[Files-Inf]
1,      oemsetup.inf,    SIZE=999,     RENAME=$(!UG_Filename)

[Files-IRMINI]
1, IRMINI.SYS, SIZE=999

[Files-Help]

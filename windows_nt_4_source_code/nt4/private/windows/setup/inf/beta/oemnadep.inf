;***********************************************************************
;
; OEMNADEP.INF
;
;       Intel EtherExpress PRO Ethernet Adapter and driver SETUP INF file.
;
;***********************************************************************

;-----------------------------------------------------------------------
; OPTION TYPE
; -----------
; This identifies the Option type we are dealing with.  The different
; possible types are:
;
; COMPUTER, DISPLAY, MOUSE, KEYBOARD, LAYOUT, SCSI, PRINTER, ...
;
;  Types specific to networking:
;
; NetAdapter,        a netcard / adapter combination or just a netcard
; NetDriver,         just a netcard driver
; NetTransport,      a complete NDIS-compliant TDI transport stack
; NetService,        an NT networking service
; NetWork,           a complete network ensemble.
; NetProvider        a complete network which supports NT MPR protocol
;-----------------------------------------------------------------------

[Identification]
    OptionType = NetAdapter

;-----------------------------------------------------------------------
; PlatformsSupported
; ------------------
; This identifies the platforms supported by the adapter card.
; Possible types are:
;
; ISA, EISA and MCA
;-----------------------------------------------------------------------

[PlatformsSupported]
    ISA
    EISA
    "Jazz-Internal Bus"

;-----------------------------------------------------------------------
; OPTION LIST
; -----------
; This section lists the OEM Option key names.  These keys are locale
; independent and used to represent the option in a locale independent
; manner.
;
;-----------------------------------------------------------------------

[Options]
    IEEPRO


;***********************************************************************
; CONSTANTS FOR USING DIALOGS
;***********************************************************************

[FileConstants]
;
;  File names, etc.
;
UtilityInf      = "UTILITY.INF"
ParamInf        = "NCPARAM.INF"
subroutineinf   = "SUBROUTN.INF"
SoftwareType    = "driver"
Exit_Code       = 0

;
; EventLog Message File
;
NetEventDLL     = "%SystemRoot%\System32\netevent.dll"
IoLogMsgDLL     = "%SystemRoot%\System32\IoLogMsg.dll"

; Product Info
;
Manufacturer    =  "Microsoft"
ProductMajorVersion     = "4"
ProductMinorVersion     = "0"
ProductVersion  = $(ProductMajorVersion)"."$(ProductMinorVersion)
;
; Software
;
ProductSoftwareName     = "IEEPRO"
ProductSoftwareImagePath = "\SystemRoot\System32\drivers\ieepro.sys"
NetRuleSoftwareType     = "eproSys ndisDriver eproDriver"
NetRuleSoftwareUse      = $(SoftwareType)
NetRuleSoftwareBindForm = """EPROSys"" yes no container"
NetRuleSoftwareClass    = {"eproDriver basic"}
NetRuleSoftwareBindable = {"eproDriver eproAdapter non exclusive 100"}
;
; Hardware
;

ProductHardwareName     = "IEEPRO"
NetRuleHardwareType     = "epro eproAdapter"
NetRuleHardwareBindForm = " yes yes container"
NetRuleHardwareClass    = {"eproAdapter basic"}
ProductOpSupport     = 134 ; 0x0086 ; Display,Removable,Properties,Not Updatable
ProductMCAOpSupport  = 132 ; 0x0084 ; Display,Removable,Not Properties,Not Updatable

;
;  MicroChannel System ID Info
;
EE16_1BYTE      = 139
EE16_2BYTE      = 98
NETCARD_ID      = 25227
;
; Registry Key
;
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\"$(ProductSoftwareName)"\CurrentVersion"
ParamKeyName    = $(!NTN_ServiceBase)"\"$(ProductHardwareName)"\Parameters"

[GeneralConstants]
;
;  Program flow control variables.
;
from      = ""
to        = ""
;
;  Return codes; Exit_Code is set to one of these
;
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2

KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""

TRUE            = 1
FALSE           = 0
NoTitle         = 0

ExitState   = "Active"
OldVersionExisted = $(FALSE)

DriverPath      = $(!STF_NTPATH)\drivers

;MachineType = ""

[date]
    ; Now is a list which contains { Sec from 1-1-1970, Year, Month, Day, Hour,
    ; Minute, Second }
    Now = {} ? $(!LIBHANDLE) GetSystemDate

;---------------------------------------------------------------------------
; 1. Identify
;
; DESCRIPTION:   To verify that this INF deals with the same type of options
;                as we are choosing currently.
;
; INPUT:         None
;
; OUTPUT:        $($R0): STATUS: STATUS_SUCCESSFUL
;                $($R1): Option Type (COMPUTER ...)
;                $($R2): Diskette description
;---------------------------------------------------------------------------

[Identify]
    ;
    ;
    read-syms Identification

    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)

    Return $(Status) $(Identifier) $(Media)

;------------------------------------------------------------------------
; 2. ReturnOptions:
;
; DESCRIPTION:   To return the option list supported by this INF and the
;                localised text list representing the options.
;
;
; INPUT:         $($0):  Language used. ( ENG | FRN | ... )
;
; OUTPUT:        $($R0): STATUS: STATUS_SUCCESSFUL |
;                                STATUS_NOLANGUAGE
;                                STATUS_FAILED
;                                STATUS_NOTSUPPORTED
;
;                $($R1): Option List
;                $($R2): Option Text List
;------------------------------------------------------------------------

[ReturnOptions]
    ;
    ;
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}

    ;
    ; Check if the language requested is supported
    ;
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
    ;
    ; Check if the platforms requested is supported
    ;
    ifstr(i) $($1) == ""
        goto returnoptions
    endif

    set PlatformList = ^(PlatformsSupported, 1)
    Ifcontains(i) $($1) in $(PlatformList)
        goto returnoptions
    else
        set Status = STATUS_NOTSUPPORTED
        goto finish_ReturnOptions
    endif
    else
    set Status = STATUS_NOLANGUAGE
    goto finish_ReturnOptions
    endif

    ;
    ; form a list of all the options and another of the text representing
    ;

returnoptions = +
    set OptionList     = ^(Options, 1)
    set OptionTextList = ^(OptionsText$($0), 1)
    set Status         = STATUS_SUCCESSFUL

finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)

;------------------------------------------------------------------------
;
; InstallOption:
;
;      This section is shelled to by main installation processing
;      or by NCPASHEL.INF during reconfig, removal, update, etc.
;
;
; FUNCTION:  To copy files representing Options
;            To configure the installed option
;            To update the registry for the installed option
;
; INPUT:     $($0):  Language to use
;            $($1):  OptionID to install
;            $($2):  SourceDirectory
;            $($3):  AddCopy  (YES | NO)
;            $($4):  DoCopy   (YES | NO)
;            $($5):  DoConfig (YES | NO)
;
; OUTPUT:    $($R0): STATUS: STATUS_SUCCESSFUL |
;                            STATUS_NOLANGUAGE |
;                            STATUS_USERCANCEL |
;                            STATUS_FAILED
;
;------------------------------------------------------------------------
[InstallOption]
    ;
    ; Set default values for
    ;
    Debug-Output "At InstallOption"
    set Status   = STATUS_FAILED
    ;
    ; extract parameters
    ;
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)

    ;
    ; Check if the language requested is supported
    ;
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
    Return STATUS_NOLANGUAGE
    endif

    set-subst LF = "\n"

    read-syms GeneralConstants
    read-syms FileConstants

    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
    set Continue = "OK"
    endif
    read-syms FileConstants$(!STF_LANGUAGE)

    detect date

    set-title  $(FunctionTitle)

    set to   = Begin
    set from = Begin

    
    Set MachineType = $(!STF_BUSTYPE)
    Debug-Output "MachineType is: "$(MachineType)

;
;  Assume all is well.
;
    set CommonStatus = STATUS_SUCCESSFUL

    EndWait

;
;   Set up the operation-mode-based variables and gaily welcome
;   the user.  If the "install mode" variable is improperly set,
;   assume this is a new installation.
;

Begin = +
    Debug-Output "At Begin"
    Set ActivateDetection = FALSE

    Ifstr(i) $(!NTN_InstallMode) == deinstall
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else-Ifstr(i) $(!NTN_InstallMode) == configure
        set ActivateDetection = TRUE
        set StartLabel = configureadapter
        ;
        ; If MCA we cannot Configure, so just exit out.
        ;       
        ifstr(i) $(MachineType) == "MCA"
            Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
                Debug-Output "Cannot configure the EtherExpress MCA driver software."
                Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
            else
                Debug-Output "Cannot configure the EtherExpress MCA adapter card."
                Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_HARDWARE
            endif
            set Error = $($R0)
            set from = end
            set to = end
            goto nonfatalinfo
        endif
        ;
        ;   You cannot config the software component
        ;
        Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
            Debug-Output "Cannot configure the 82595 driver software."
            Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
            ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error: cannot get an error string."
            goto ShellCodeError
            endif
            set Error = $($R0)
            set from = end
            set to = end
            goto nonfatalinfo
        endif
    else
        set ActivateDetection = TRUE
        set StartLabel = installadapter
        set OEM_ABANDON_OPTIONS = {}
        set OEM_ABANDON_SOFTWARE = FALSE
        set OEM_ABANDON_ON = TRUE   
    endif

    ;===================================================
    ;  Netcard Detection logic
    ;
    ;  Initialize use of netcard detection;
    ;  Construct require global parameter variables
    ;
    Debug-Output "OEMNADEP.INF: =================================================="
    Debug-Output "OEMNADEP.INF: STF_CWDIR is: "$(!STF_CWDIR)
    Debug-Output "OEMNADEP.INF: STF_LANGUAGE is: "$(!STF_LANGUAGE)
    Debug-Output "OEMNADEP.INF: Option is: "$(Option)
    Debug-Output "OEMNADEP.INF: !STF_NCDETECT  is: "$(!STF_NCDETECT)
    Debug-Output "OEMNADEP.INF: !STF_NCOPTION  is: "$(!STF_NCOPTION)
    Debug-Output "OEMNADEP.INF: !STF_NCDETCARD is: "$(!STF_NCDETCARD)
    Debug-Output "OEMNADEP.INF: !STF_NCDETINFO is: "$(!STF_NCDETINFO)
    Debug-Output "OEMNADEP.INF: MachineType is: "$(MachineType)
    Debug-Output "OEMNADEP.INF: =================================================="

    Set DetectedCard = FALSE

    Ifstr(i) $(ActivateDetection) != TRUE
        Goto $(StartLabel)
    Endif


    ;
    ;  Set !STF_NC_PARAMS and !STF_NC_PNAMES by calling
    ;    PARAM.INF!Param_BuildTypeLists.
    ;   Pass it a list of the form:
    ;
    ;   {  { <param name>,
    ;        <name of choice list var>,
    ;        <name of default var> },
    ;      ...
    ;   }
    ;
    Set TypeList = {{IRQ,IRQList,IRQValue},+
                    {IOADDR, IOAddrValues, IOAddrValue},+
                    {IOCHANNELREADY, IOReadyList_ignore, IOReadyCBI},+
                    {TRANSCEIVER, TransceiverList_ignore, TransceiverCBI}+
                    }

    Debug-Output "OEMNADEP.INF: Calling Param_BuildTypeLists"
    Shell $(ParamInf) Param_BuildTypeLists $(Option) $(TypeList)
    Set Status = $($R0)
    ifstr(i) $(Status) != STATUS_SUCCESSFUL
        Goto fataldetect
    Endif

    Debug-Output "OEMNADEP.INF: Calling Param_SetDefaults"
    Shell $(ParamInf) Param_SetDefaults {}

;    ifstr(i) $(MachineType) == "MCA"
;       goto CheckForMCA
;    endif

    ;  Establish presentation versions of choice lists.

    Shell $(ParamInf) HexListFromDecList $(IOAddrValues)
    Set IOAddrList = $($R0)

    ;  Since we have IRQ higher than 9, sort the IRQ list.

    Shell $(UtilityInf) SortList $(IRQList) TRUE FALSE
    Set IRQList = $($R0)

    Ifstr(i) $(!STF_NCDETECT) == YES
        Ifstr(i) $(!STF_NCOPTION) == $(Option)
           Set DetectedCard = TRUE
           Debug-Output "OEMNADEP.INF: Setting DetectedCard to TRUE"
        Endif
    Endif

    ;
    ; make sure both value types (display and combo index are set)
    ; since the set defaults above only set IRQValue, IOAddrValue,
    ; IOReadyCBI, and TransceiverCBI 
    ;
    set IOAddrCBI = ~($(IOAddrValues),$(IOAddrValue))
    set IRQCBI = ~($(IRQList),$(IRQValue))
    set IOReadyValue = *($(IOReadyList), $(IOReadyCBI))
    set TransceiverValue = *($(TransceiverList), $(TransceiverCBI))


    ;
    ;  End Netcard Detection logic
    ;===================================================


    Shell "" DebugConfiguration "After parameter querying"

    Set from = $(fatal)
    Set to = $(fatal)
    Goto $(StartLabel)

;-----------------------------------------------
; Installation Section
;-----------------------------------------------

installadapter = +
    Debug-Output "At installadapter"
;
;   First, check whether the same version of the software exists
;

    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct

    Ifstr $(KeyProduct) != $(KeyNull)
        ;
        ; Same version already existed in the local machine
        ; Popup the dialog and ask the user whether he wants to continue
        ;
        CloseRegKey $(KeyProduct)

        ifstr(i) !(NTN_RegBase) == $(ProductKeyName)
           ;
           ; Cannot Install the same software again
           ;
           Shell $(UtilityInf), VerExistedDlg, $(ProductSoftwareDescription),+
               $(ProductVersion)
           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "ShellCode error: cannot get an error string."
               goto ShellCodeError
           endif

           goto end
        else
           ;
           ; Add a new adapter card?
           ;
           Shell $(UtilityInf), CardExistedDlg

           ifint $($ShellCode) != $(!SHELL_CODE_OK)
               Debug-Output "ShellCode error: cannot get an error string."
               goto ShellCodeError
           endif

           ifstr(i) $($R1) != "OK"
               goto end
           endif
           set OldVersionExisted = $(TRUE)
        endif
    endif


    ;===================================================
    ;  Netcard Detection logic
    ;
    ;   If this is a detected card, query its parameters
    ;   and merge them into the default list.
    ;
    Ifstr(i) $(DetectedCard) != TRUE
        Goto adaptersetup
    Endif
    ;
    ;   Get the detected parameters
    ;

;
; do not support MCA
;
;CheckForMCA = +    
;    Debug-Output "At CheckForMCA"
;    StartWait
    ;
    ;   Check to see if were on a MicroChannel Machine
    ;
;    Shell $(UtilityInf), MCAFindBus, $(EE16_1BYTE), $(EE16_2BYTE)
;    ifint $($ShellCode) != $(!SHELL_CODE_OK)
;       Debug-Output "OEMNADEP.INF: Failed Return from MCAFindBus."
;       goto CheckForISA
;    endif
;    ifstr $($R0) != "NO_ERROR"
;        Debug-Output "OEMNADEP.INF: Failed Return from MCAFindBus."
;       goto CheckForISA
;    endif
;    ifstr(i) $($R1) == {}
;       set Error = $(CANNOT_FIND_ANY_CARD)
;       set CommonStatus = USER_CANCEL
;       set from = "end"
;       goto nonfatal
;    endif
;    set AdapterList = $($R1)
;    goto skipoptions

CheckForISA = +

    Debug-Output "At CheckForISA"
    Shell $(ParamInf) Param_QueryCard $(!STF_NCDETCARD)
    EndWait
    Ifstr(i) $($R0) != STATUS_SUCCESSFUL
        Debug-Output "OEMNADEP.INF: Calling Param_QueryCard returned an error!"
        Goto adaptersetup
    Endif
    ;
    ;   Merge the detected values in.
    ;
    Set DetectedParams = $($R1)
    Debug-Output "OEMNADEP.INF: Calling Param_SetDefaults to merge detected params"
    Shell $(ParamInf) Param_SetDefaults $(DetectedParams)

    ;
    ; make sure both value types (display and combo index are set)
    ; since the set defaults above only set IRQValue, IOAddrValue,
    ; IOReadyCBI, and TransceiverCBI 
    ;
    set IOAddrCBI = ~($(IOAddrValues),$(IOAddrValue))
    set IRQCBI = ~($(IRQList),$(IRQValue))
    set IOReadyValue = *($(IOReadyList), $(IOReadyCBI))
    set TransceiverValue = *($(TransceiverList), $(TransceiverCBI))

    ;
    ;  End Netcard Detection logic
    ;===================================================

    goto adaptersetup

;-----------------------------------------------
; Configuration Section
;-----------------------------------------------
;
;   Get the current values of all the parameters
;
configureadapter = +
    Debug-Output "At configureadapter"
   
    SetHelpFile "eepro.hlp" 1 6

    Ifstr $(KeyProduct) == $(KeyNull)
        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) $(MAXIMUM_ALLOWED) KeyProduct
        Ifstr $(KeyProduct) == $(KeyNull)
            set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
            Debug-Output "Cannot find component product key"
            goto fatalregistry
        Endif
    Endif

    ;
    ; Get the other parameters;  they're attached to the service parameters key
    ;
    Debug-Output "INF: Shelling to FindService"
    Shell $(UtilityInf) FindService, $(KeyProduct)
    Ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "INF: FindService shell failure"
        Goto ShellCodeError
    Endif
    Ifstr(i) $($R0) != NO_ERROR
        Debug-Output "INF: FindService Shell error: "$($R0)
        Goto fatalregistry
    endif

    Set KeyParameters = $($R2)

    ;
    ;  We don't need the services key, so close it.
    ;
    CloseRegKey $($R1)

    Ifstr $(KeyParameters) == $(KeyNull)
        set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
        Debug-Output "Cannot find component service"
        goto fatalregistry
    endif

    set OldVersionExisted = $(TRUE)
    set OldIOAddrValue = "0"

    set ValueName = ""
    set ValueData = ""
    set ValueStr  = ""
    set ValueList = {}

    ;
    ; Get the old values
    ;
    EnumRegValue $(KeyParameters) ValueList

    ForListDo $(ValueList)
        set ValueItem = $($)
        set ValueName = *($(ValueItem),1)
        set ValueData = *($(ValueItem),4)
        Ifstr(i) $(ValueName) == "INTERRUPT"
            set IRQValue = $(ValueData)
            Debug-Output "OEMNADEP.INF: Registry IRQ: "$(IRQValue)
        else-ifstr(i) $(ValueName) == "IOADDRESS"
            set IOAddrValue = $(ValueData)
            Debug-Output "OEMNADEP.INF: Registry IOAddr: "$(IOAddrValue)
        else-ifstr(i) $(ValueName) == "IoChannelReady"
            set IOReadyCBI = $(ValueData)
            Debug-Output "OEMNADEP.INF: Registry IOChannelReady: "$(IOReadyCBI)
        else-ifstr(i) $(ValueName) == "Transceiver"
            set TransceiverCBI = $(ValueData)
            Debug-Output "OEMNADEP.INF: Registry Transceiver: "$(TransceiverCBI)
        else-ifstr(i) $(ValueName) == "BusType"
            set BusInterfaceType = $(ValueData)
        else-ifstr(i) $(ValueName) == "BusNumber"
            set BusNumber = $(ValueData)
        else-ifstr(i) $(ValueName) == "OLDIOADDRESS"
            set OldIOAddrValue = $(ValueData)
        endif
    EndForListDo

    ifstr(i) $(IRQValue) == ""
        set IRQCBI = 2;
        set IRQValue = *($(IRQList), $(IRQCBI))
        Debug-Output "OEMNADEP.INF: Setting Default IRQ"
    else
        set IRQCBI = ~($(IRQList),$(IRQValue))
    endif
        
    ifstr(i) $(IOAddrValue) == ""
        set IOAddrCBI = 1
        set IOAddrValue = *($(IOAddrValues), $(IOAddrCBI))    
        Debug-Output "OEMNADEP.INF: Setting Default IOAddress"
    else
        set IOAddrCBI = ~($(IOAddrValues),$(IOAddrValue))
    endif

    ifstr(i) $(IOReadyCBI) == ""
        set IOReadyCBI = 4
        Debug-Output "OEMNADEP.INF: Setting Default IOChannelReady"
    endif

    ifstr(i) $(TransceiverCBI) == ""
        set TransceiverCBI = 4
        Debug-Output "OEMNADEP.INF: Setting Default Transceiver"
    endif        
    
    set IOReadyValue = *($(IOReadyList), $(IOReadyCBI))
    set TransceiverValue = *($(TransceiverList), $(TransceiverCBI))

;
;   Put up the adapter configuration dialog if necessary.
;
adaptersetup = +

    Debug-Output "At adaptersetup"
    
;    set IOAddrValue = *($(IOAddrList), ~($(IOAddrValues),$(IOAddrValue)))
;    set IRQValue = *($(IRQList), ~($(IRQList),$(IRQValue)))
;    set IOReadyValue = *($(IOReadyList), $(IOReadyValue))
;    set TransceiverValue = *($(TransceiverList), $(TransceiverValue))
;
    Shell "" DebugConfiguration "After List Translation"
    
    ;===================================================
    ;  Netcard Detection logic
    ;
    ;   Check that this card's parameters can be
    ;   fully detected.
    ;
    Shell $(ParamInf) Param_ParameterConfidence
    Ifstr(i) $($R0) != STATUS_SUCCESSFUL
        Debug-Output "OEMNADEP.INF: parameter confidence too low to bypass configuration"
        Goto adapteroptions
    Endif
    ;
    ;   If this is a detected card and we're in EXPRESS mode,
    ;   see if the parameters as they currently exist are
    ;   verifiably correct.
    ;
    Ifstr(i) $(DetectedCard) == TRUE
        Ifstr(i) $(!STF_INSTALL_MODE) != CUSTOM
            set BusInterfaceType = *($(!STF_NCDETINFO),5)
            set BusNumber = *($(!STF_NCDETINFO),6)
            Goto adapterverify
        Endif
    Endif
    ;
    ;  End Netcard Detection logic
    ;===================================================

adapteroptions = +
    Debug-Output "At adapteroptions"
    Set from = adapteroptions

    ifstr(i) $(!STF_GUI_UNATTENDED) == "YES"
        ifstr(i) $(!AutoNetInterfaceType) != ""
            set BusInterfaceType = $(!AutoNetInterfaceType)
        else
            set BusInterfaceType = 1    ;ISA
        endif
        ifstr(i) $(!AutoNetBusNumber) != ""
            set BusNumber = $(!AutoNetBusNumber)
        else
            set BusNumber = 0
        endif
        goto adapterverify
    endif

    ; save address value for change comparison
    set LastIOAddrValue = $(IOAddrValue)


    ;
    ; change address to hex for display
    ;
    ; set IRQValue = *($(IRQList), $(IRQCBI))
    set IOAddrValue = *($(IOAddrList), $(IOAddrCBI))
    ; set IOReadyValue = *($(IOReadyList), $(IOReadyCBI))
    ; set TransceiverValue = *($(TransceiverList), $(TransceiverCBI))

    
    Shell "" DebugConfiguration "Before rause UI"
    
    read-syms FileDependentDlg$(!STF_LANGUAGE)

    ui start "InputDlg"

    ifstr(i) $(DLGEVENT) == "CONTINUE"

        Set IRQValue = $(Combo1Out)
        Set IRQCBI = ~($(IRQList),$(IRQValue))

        Set IOAddrCBI = ~($(IOAddrList),$(Combo2Out))

        Set IOReadyValue = $(Combo3Out)
        Set IOReadyCBI = ~($(IOReadyList),$(IOReadyValue))
        
        Set TransceiverValue = $(Combo4Out)
        Set TransceiverCBI = ~($(TransceiverList),$(TransceiverValue))


        ui pop 1
    else-ifstr(i) $(DLGEVENT) == "BACK"
        set CommonStatus = STATUS_USERCANCEL
        Debug-Output "Action: exit. Bye."
        ui pop 1
        goto end
    else
        Debug-Output "Action: unknown. Bye."
        ui pop 1
        goto end
    endif

    ; convert back to dec
    Set IOAddrValue = *($(IOAddrValues),$(IOAddrCBI))

    ; set old value if the addr was changed and old addr was not set
    ifint $(OldIOAddrValue) == "0"
        ifint $(IOAddrValue) != $(LastIOAddrValue)
            Set OldIOAddrValue = $(LastIOAddrValue)
        endif
    endif

    ifstr(i) $(!STF_NCDETINFO) == {}
        Shell $(UtilityInf),GetBusTypeDialog,$(ProductHardwareDescription) $(BusInterfaceType) $(BusNumber)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error."
            goto ShellCodeError
        endif
        set BusInterfaceType = $($R1)
        set BusNumber = $($R2)
    else
        set BusInterfaceType = *($(!STF_NCDETINFO),5)
        set BusNumber = *($(!STF_NCDETINFO),6)
    endif

 adapterverify = +

    Debug-Output "At adapterverify"
    Shell "" DebugConfiguration "after running dialog"

    ;===================================================
    ;  Netcard Detection logic
    ;
    ;   If this is a detected card, attempt to validate the options
    ;
    Ifstr(i) $(DetectedCard) != TRUE
        Goto skipoptions
    Endif

    Debug-Output "OEMNADEP.INF: Calling Param_VerifyCard"
    Shell $(ParamInf) Param_VerifyCard $(!STF_NCDETCARD)
    Ifstr(i) $($R0) == STATUS_SUCCESSFUL
        Debug-Output "OEMNADEP.INF: Param_VerifyCard succeeded"
        Goto skipoptions
    Endif
    ;
    ;   Give the user a chance to retry or force the options given.
    ;
    Set from = adapteroptions
    Set to = skipoptions
    Shell $(UtilityInf),RegistryErrorString,VERIFY_WARNING
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error: cannot get an error string."
        goto ShellCodeError
    endif
    set Error = $($R0)
    Goto Warning
    ;
    ;  End Netcard Detection logic
    ;===================================================

;
;   If installing, go create the necessary keys;
;   if configuring, they're already open.
;
skipoptions =+

    Debug-Output "At skipoptions"
    ifint $(OldVersionExisted) == $(TRUE)
        ifstr(i) $(!NTN_InstallMode) == configure
            goto writeparameters
        endif
    endif
    StartWait
    ;
    ; Add Software Component
    ;
    ifint $(OldVersionExisted) == $(FALSE)
        ifstr(i) $(!NTN_InstallMode) == "install"
           Ifstr(i) $(DoCopy) == "YES"

              Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES

              Ifint $($ShellCode) != $(!SHELL_CODE_OK)
                  Goto ShellCodeError
              Else-Ifstr(i) $($R0) == STATUS_FAILED
                  Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
                  ifint $($ShellCode) != $(!SHELL_CODE_OK)
                      goto ShellCodeError
                  endif
                  set Error = $($R0)
                  Goto fatal
              Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
                  Goto successful
              Endif

              Set SrcDir = $($R1)

           Endif

           install "Install-Option"
           ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
              Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
              ifint $($ShellCode) != $(!SHELL_CODE_OK)
                  goto ShellCodeError
              endif
              set Error = $($R0)
              goto fatal
           endif
        endif

        Debug-Output "At AddSoftwareComponent"
        Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), +
            $(ProductSoftwareName), +
            $(ProductSoftwareDescription), $(STF_CONTEXTINFNAME), +
            $(ProductSoftwareImagePath), "kernel", "NDIS", {}, "",+
            $(NetEventDLL)

        Set OEM_ABANDON_SOFTWARE = TRUE

        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif
        ;
        ;   At this point:
        ;     $R1 contains the product version key handle;
        ;     $R2 contains the NetRules subkey handle;
        ;     $R3 contains the new Services key handle; and
        ;     $R4 contains the Parameters key
        ;     $R5 contains the Linkage Key
        ;
        set RegistryErrorIndex = $($R0)
        set KeyProduct      = $($R1)
        Set SoftNetRulesKey = $($R2)
        CloseRegKey $($R3)
        CloseRegKey $($R4)
        CloseRegKey $($R5)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Registry error: add software components"
            CloseRegKey $(KeyProduct)
            CloseRegKey $(SoftNetRulesKey)
            goto fatalregistry
        endif

        set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
                   {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                   {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                   {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareDescription)},+
                   {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareDescription)},+
                   {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareName)},+
                   {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}

        Debug-Output "At AddValueList - SoftwareType"
        Shell  $(UtilityInf), AddValueList, $(KeyProduct), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Registry error: add value list."
            CloseRegKey $(KeyProduct)
            CloseRegKey $(SoftNetRulesKey)
            goto fatalregistry
        endif

        set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareType)},+
                    {use,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareUse)}, +
                    {bindform,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareBindForm)}, +
                    {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareClass)}, +
                    {bindable,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareBindable)}, +
                    {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}

        Debug-Output "At AddValueList - bindform"
        Shell  $(UtilityInf), AddValueList, $(SoftNetRulesKey), $(NewValueList)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error."
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        CloseRegKey $(KeyProduct)
        CloseRegKey $(SoftNetRulesKey)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            EndWait
            Debug-Output "Resgitry error: add value list."
            goto fatalregistry
        endif
    endif
;
;   Create the HARDWARE\Netcard region and its corresponding service
;
    Debug-Output "At AddHardwareComponent"
    Shell $(UtilityInf), AddHardwareComponent, $(ProductHardwareName),$(STF_CONTEXTINFNAME),$(ProductKeyName)

    ifint $($R4) != -1
        Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(!NTN_SoftwareBase)"\Microsoft\Windows NT\CurrentVersion\NetworkCards\"$($R4))
    endif

    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "Cannot add hardware component"
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "Registry error: add hardware component"
        CloseRegKey $($R1)
        CloseRegKey $($R2)
        CloseRegKey $($R3)
        goto fatalregistry
    endif

;
;   At this point:
;     $R1  Registry key variable for HARDWARE\Netcard\(n)
;     $R2  Registry key variable for HARDWARE\Netcard\(n)\\NetRules
;     $R3  Registry key handle for <service>\Parameters key
;     $R4  Adapter number assigned to adapter
;     $R5  Service name generated by combining svc name with adapter number
;
    set KeyParameters = $($R3)
    set KeyAdapterRules = $($R2)
    set AdapterNumber = $($R4)

    ifstr(i) $(MachineType) == "MCA"
        set OpSupport = $(ProductMCAOpSupport)
    else
        set OpSupport = $(ProductOpSupport)
    Endif

    set NewValueList = {{Manufacturer,$(NoTitle),$(!REG_VT_SZ),$(Manufacturer)},+
               {Title,$(NoTitle),$(!REG_VT_SZ),"["$($R4)"] "$(ProductHardwareDescription)},+
               {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareDescription)},+
               {ProductName,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareName)},+
               {ServiceName,$(NoTitle),$(!REG_VT_SZ),$($R5)},+
               {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(OpSupport)},+
               {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}

    Debug-Output "At AddValueList - Manufacturer"
    Shell  $(UtilityInf), AddValueList, $($R1), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error"
        goto ShellCodeError
    endif

    CloseRegKey $($R1)

    set TempProdName = """"$(ProductHardwareName)$(AdapterNumber)""""
    set TempBindForm = $(TempProdName)$(NetRuleHardwareBindForm)

    set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleHardwareType)},+
            {bindform,$(NoTitle),$(!REG_VT_SZ),$(TempBindForm)}, +
            {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleHardwareClass)}, +
            {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}

    Debug-Output "At AddValueList - class"
    Shell  $(UtilityInf), AddValueList, $(KeyAdapterRules), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error."
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        EndWait
        Debug-Output "Resgitry error: add value list."
        CloseRegKey $(KeyParameters)
        CloseRegKey $(KeyAdapterRules)
        goto fatalregistry
    endif

    CloseRegKey $(KeyAdapterRules)

    goto writeparameters
;
;   REQUIRED:   $(KeyParameters) contains service Parameters key handle
;
writeparameters = +
    Debug-Output "At writeparameters"
;
;   Add the rest of the parameters to the Services area
;
    Ifstr(i) $(MachineType) == "MCA"
       set NewValueList = {{BusType,$(NoTitle),$(!REG_VT_DWORD),$(BusTypeNum)},+
              {McaPosId,$(NoTitle),$(!REG_VT_DWORD),$(NETCARD_ID)},+
              {SlotNumber,$(NoTitle),$(!REG_VT_DWORD),$(SlotNum)},+
              {MediaType,$(NoTitle),$(!REG_VT_DWORD),1}}
    else                       
       Shell "" DebugConfiguration "Before Writing Parameters"
       set NewValueList = {{INTERRUPT,$(NoTitle),$(!REG_VT_DWORD),$(IRQValue)},+
              {BusType,$(NoTitle),$(!REG_VT_DWORD),$(BusInterfaceType)},+
              {BusNumber,$(NoTitle),$(!REG_VT_DWORD),$(BusNumber)},+
              {MediaType,$(NoTitle),$(!REG_VT_DWORD),1},+
              {IoChannelReady,$(NoTitle),$(!REG_VT_DWORD),$(IOReadyCBI)},+
              {Transceiver,$(NoTitle),$(!REG_VT_DWORD),$(TransceiverCBI)},+
              {OLDIOADDRESS,$(NoTitle),$(!REG_VT_DWORD),$(OldIOAddrValue)},+
              {IOADDRESS,$(NoTitle),$(!REG_VT_DWORD),$(IOAddrValue)}}
    endif
    
    Shell  $(UtilityInf), AddValueList, $(KeyParameters), $(NewValueList)

    ifstr(i) $(!STF_GUI_UNATTENDED) == "YES"
        Shell $(UtilityInf),AddDefaultNetCardParameters,$(KeyParameters)
    endif

    CloseRegKey $(KeyParameters)

    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error."
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        Debug-Output "Registry error: Add value list"
        goto fatalregistry
    endif

    EndWait

    goto successful

;-----------------------------------------------
; Binding section
;-----------------------------------------------
bindingadapter =+
    Debug-Output "At bindingadapter"
    set Error = "Binding: Sorry, not yet implemented."
    goto fatal

;-----------------------------------------------
; Removeadapter section
;-----------------------------------------------

removeadapter = +
    Debug-Output "At removeadapter"
    Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
        ; Remove Software Component
        Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
            $(ProductSoftwareName)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
        else
        Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
            $(ProductSoftwareName), $(!NTN_RegBase)
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            Debug-Output "ShellCode error"
            goto ShellCodeError
        endif

        set RegistryErrorIndex = $($R0)

        Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
            goto fatalregistry
        endif
    endif

    goto end

;-----------------------------------------------
; Upgrade Software section
;-----------------------------------------------

UpgradeSoftware = +
    Debug-Output "At UpgradeSoftware"
    ;
    ; First determine whether we want to do upgrade or update for software
    ; or hardware component. Then we will determine whether the Mode is
    ; update or upgrade.
    ;
    ; If the same version of the product existed in the registry, we do
    ; update. Otherwise, we will do a upgrade
    ;
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct
    Ifstr $(KeyProduct) != $(KeyNull)
        install "Install-Update"
        ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
            goto fatal
        endif
        SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
        SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}
                
        CloseRegKey $(KeyProduct)
    else
        goto fatalregistry
    endif

    ifstr(i) $(MachineType) == "MCA"
        set OpSupport = $(ProductMCAOpSupport)
    else
        set OpSupport = $(ProductOpSupport)
    Endif
    ;
    ; Enumerate all netcards installed of this type and update them
    ;
    set iSearch = 1
nextnetcard = +
    Shell $(UtilityInf), FindNextNetworkCard, $(ProductHardwareName), $(iSearch)
    set KeyNetcard = $($R0)
    set iSearch = $($R1)
    Debug-Output "OemNadEp.Inf: FindNextNetworkCard "$(KeyNetcard)","$(iSearch)
    Ifstr $(KeyNetcard) != $(KeyNull)
        Debug-Output "OemNadEp.Inf: Setting OperationsSupport value"
        SetRegValue $(KeyNetcard) {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(OpSupport)}
        CloseRegKey $(KeyNetcard)

        goto nextnetcard
    Endif
    

    goto end
    ;
    ; End of Upgrade Software
    ;

;
;  Escape hatches
;
successful = +
    Debug-Output "At successful"
    goto end

abandon = +
    Debug-Output "At abandon"
    ForListDo $(OEM_ABANDON_OPTIONS)
    Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
        $(ProductSoftwareName), $($)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error"
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        goto fatalregistry
    endif
    EndForListDo

    Ifstr(i) $(OEM_ABANDON_SOFTWARE) == TRUE
    ; Remove Software Component
    Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
        $(ProductSoftwareName), FALSE
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "ShellCode error"
        goto ShellCodeError
    endif

    set RegistryErrorIndex = $($R0)

    Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
        goto fatalregistry
    endif
    endif

    goto end

;
; warning display
;
warning = +
    Debug-Output "At warning"
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
        goto "end"
    endif
;
; non fatal error display
;
nonfatalinfo = +
    Debug-Output "At nonfatalinfo"
    Set Severity = STATUS
    Set CommonStatus = STATUS_USERCANCEL
    goto nonfatalmsg
nonfatal = +
    Debug-Output "At nonfatal"
    Set Severity = NONFATAL
    goto nonfatalmsg
nonfatalmsg = +
    Debug-Output "At nonfatalmsg"
    ifstr(i) $(Error) == ""
    Set Severity = NONFATAL
    Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), $(Severity), $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
    goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
    goto $(from)
    else
    goto "end"
    endif

;
;  Registry is broken
;
fatalregistry = +
    Debug-Output "At fatalregistry"
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
    goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
;
;  Netcard detection failure
;
fataldetect = +
    Debug-Output "At fataldetect"
    Shell $(UtilityInf),RegistryErrorString,CANNOT_DETECT
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
    Debug-Output "ShellCode error: cannot get an error string."
    goto ShellCodeError
    endif
    set Error = $($R0)
    Goto fatal
;
; fatal error display
;
fatal = +
    Debug-Output "At fatal"
    ifstr(i) $(Error) == ""
    Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
    goto ShellCodeError
    endif

    goto setfailed

;
;  Shelling error
;
ShellCodeError = +
    Debug-Output "At ShellCodeError"
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = "Error: "$(FunctionTitle)
    set STF_MB_TEXT  = "Shell Code Error"
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed

setfailed = +
    Debug-Output "At setfailed"
    set CommonStatus = STATUS_FAILED
    ;
    ; if OEM_ABANDON_ON == TRUE, then remove the registry entries
    ;
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
    set OEM_ABANDON_ON = FALSE
    goto abandon
    endif
    goto end

end = +
    Debug-Output "At end"
    goto term

term = +
    Debug-Output "At term"
    Return $(CommonStatus)


[DebugConfiguration]

    Set InfName = "OEMNADEP.INF"
    Debug-Output $(InfName)" **CONFIGURATION STATE: "$($0)
    Debug-Output $(InfName)" IRQValue is "$(!p:IRQValue)" or the "$(!p:IRQCBI)"th item."
    Debug-Output $(InfName)" IOAddrValue is "$(!p:IOAddrValue)" or the "$(!p:IOAddrCBI)"th item."
    Debug-Output $(InfName)" IOReadyValue is "$(!p:IOReadyValue)" or the "$(!p:IOReadyCBI)"th item."
    Debug-Output $(InfName)" TransceiverValue is "$(!p:TransceiverValue)" or the "$(!p:TransceiverCBI)"th item."

    return


;***************************************************************
;  INSTALL SECTIONS
;***************************************************************
[Install-Option]
    Debug-Output "At Install-Option"
    set STF_VITAL = ""

    ifstr(i) $(AddCopy) == "YES"

    ;
    ; Add the files to the copy list
    ;
    ;  BUGBUG: eliminate the "nt2" in the next line when Sunil fixes
    ;      the other INF files
    ;
    AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers

    endif

    ifstr(i) $(DoCopy) == "YES"

       ;
       ; Copy files in the copy list
       ;
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
       CopyFilesInCopyList

    endif

    Exit

[Install-Update]
    Debug-Output "At Install-Update"
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   ;set STF_VERSION     = "YES"

   AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
   CopyFilesInCopyList

   exit

[Install-Helpfile]
   Debug-Output "At Install-Helpfile"
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   ;set STF_VERSION     = "YES"
    set !STF_NCPA_FLUSH_COPYLIST = TRUE
    
   AddSectionFilesToCopyList Files-hlp $(SrcDir) $(!STF_WINDOWSSYSPATH)
   CopyFilesInCopyList

   exit


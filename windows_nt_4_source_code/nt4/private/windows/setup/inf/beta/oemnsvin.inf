;***********************************************************************
;
; OEMNSVIN.INF
;
;       Internet Information Server
;
; History:
;       terryk  4-1-1996      Created        
;***********************************************************************

;-----------------------------------------------------------------------
; OPTION TYPE
; -----------
; This identifies the Option type we are dealing with.  The different
; possible types are:
;
; COMPUTER, DISPLAY, MOUSE, KEYBOARD, LAYOUT, SCSI, PRINTER, ...
;
;  Types specific to networking:
;
; NetAdapter,        a netcard / adapter combination or just a netcard
; NetDriver,         just a netcard driver
; NetTransport,      a complete NDIS-compliant TDI transport stack
; NetService,        an NT networking service
; NetWork,           a complete network ensemble.
; NetProvider        a complete network which supports NT MPR protocol
;-----------------------------------------------------------------------

[Identification]
    OptionType = NetService

;-----------------------------------------------------------------------
; OPTION LIST
; -----------
; This section lists the OEM Option key names.  These keys are locale
; independent and used to represent the option in a locale independent
; manner.
;
;-----------------------------------------------------------------------

[Options]
    INETSRV

;***********************************************************************
; CONSTANTS FOR USING DIALOGS
;***********************************************************************

[FileConstants]
;
; Product Info
;
Manufacturer        = "Microsoft"
ProductMajorVersion = "4"
ProductMinorVersion = "0"
ProductVersion      = $(ProductMajorVersion)"."$(ProductMinorVersion)
ProductOpSupport    = 134 ; 0x0086 ; Display,Removable,Properties,Not Updatable

;================================================================
ProductINETSRVName        = "Inetsrv"

;
; Registry Key Names
;
ProductKeyName  = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\Inetsrv\CurrentVersion"


[GeneralConstants]
;
;  File names, etc.
;
UtilityInf       = "UTILITY.INF"
subroutineinf    = "SUBROUTN.INF"
Exit_Code        = 0
;ShellCode       = 0
BillboardVisible = 0

;
;  Program flow control variables.
;
from      = ""
to        = ""
;
;  Return codes; Exit_Code is set to one of these
;
ExitCodeOk     = 0
ExitCodeCancel = 1
ExitCodeFatal  = 2

KeyNull         = ""
MAXIMUM_ALLOWED   = 33554432
SERVICE_NO_CHANGE = 4294967295
RegistryErrorIndex = NO_ERROR
KeyProduct      = ""
KeyParameters   = ""

TRUE            = 1
FALSE           = 0
NoTitle         = 0

ExitState   = "Active"
OldVersionExisted = $(FALSE)

[date]
    ; Now is a list which contains { Sec from 1-1-1970, Year, Month, Day, Hour,
    ; Minute, Second }
    Now = {} ? $(!LIBHANDLE) GetSystemDate


;---------------------------------------------------------------------------
; 1. Identify
;
; DESCRIPTION:   To verify that this INF deals with the same type of options
;                as we are choosing currently.
;
; INPUT:         None
;
; OUTPUT:        $($R0): STATUS: STATUS_SUCCESSFUL
;                $($R1): Option Type (COMPUTER ...)
;                $($R2): Diskette description
;---------------------------------------------------------------------------

[Identify]
    ;
    ;
    read-syms Identification

    set Status     = STATUS_SUCCESSFUL
    set Identifier = $(OptionType)
    set Media      = #("Source Media Descriptions", 1, 1)

    Return $(Status) $(Identifier) $(Media)

;------------------------------------------------------------------------
; 2. ReturnOptions:
;
; DESCRIPTION:   To return the option list supported by this INF and the
;                localised text list representing the options.
;
;
; INPUT:         $($0):  Language used. ( ENG | FRN | ... )
;
; OUTPUT:        $($R0): STATUS: STATUS_SUCCESSFUL |
;                                STATUS_NOLANGUAGE
;                                STATUS_FAILED
;
;                $($R1): Option List
;                $($R2): Option Text List
;------------------------------------------------------------------------

[ReturnOptions]
    ;
    ;
    set Status        = STATUS_FAILED
    set OptionList     = {}
    set OptionTextList = {}

    ;
    ; Check if the language requested is supported
    ;
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) in $(LanguageList)
        goto returnoptions
    else
        set Status = STATUS_NOLANGUAGE
        goto finish_ReturnOptions
    endif

    ;
    ; form a list of all the options and another of the text representing
    ;

returnoptions = +
    set OptionList     = ^(Options, 1)
    ifstr(i) $(!STF_PRODUCT) == "WINNT"
         set OptionTextList = ^(OptionsWINNTText$($0), 1)
    else
         set OptionTextList = ^(OptionsLANMANNTText$($0), 1)
    endif
    set Status         = STATUS_SUCCESSFUL

finish_ReturnOptions = +
    Return $(Status) $(OptionList) $(OptionTextList)

;----------InstallOption-------------------------------------------------
;
; InstallOption:
;
;      This section is shelled to by main installation processing
;      or by NCPASHEL.INF during reconfig, removal, update, etc.
;
;
; FUNCTION:  To copy files representing Options
;            To configure the installed option
;            To update the registry for the installed option
;
; INPUT:     $($0):  Language to use
;            $($1):  OptionID to install
;            $($2):  SourceDirectory
;            $($3):  AddCopy  (YES | NO)
;            $($4):  DoCopy   (YES | NO)
;            $($5):  DoConfig (YES | NO)
;
; OUTPUT:    $($R0): STATUS: STATUS_SUCCESSFUL |
;                            STATUS_NOLANGUAGE |
;                            STATUS_USERCANCEL |
;                            STATUS_FAILED
;
;------------------------------------------------------------------------
[InstallOption]
    ;
    ; extract parameters
    ;
    set Option   = $($1)
    set SrcDir   = $($2)
    set AddCopy  = $($3)
    set DoCopy   = $($4)
    set DoConfig = $($5)

    ;
    ; Check if the language requested is supported
    ;
    set LanguageList = ^(LanguagesSupported, 1)
    Ifcontains(i) $($0) NOT-IN $(LanguageList)
        Return STATUS_NOLANGUAGE
    endif

    ; define all the constants

    set-subst LF = "\n"

    read-syms GeneralConstants
    read-syms FileConstants

    read-syms DialogConstants$(!STF_LANGUAGE)
    ifstr(i) $(!NTN_Origination) == "NCPA"
        set Continue = $(OK)
    endif
    read-syms FileConstants$(!STF_LANGUAGE)

    detect date

    set-title  $(FunctionTitle)

    set to   = Begin
    set from = Begin
;
;  Assume all is well.
;
    set CommonStatus = STATUS_NO_EFFECT

    EndWait

;
;   Set up the operation-mode-based variables and gaily welcome
;   the user.  If the "install mode" variable is improperly set,
;   assume this is a new installation.
;

Begin = +
    Ifstr(i) $(!NTN_InstallMode) == deinstall
        set StartLabel = removeadapter
    else-Ifstr(i) $(!NTN_InstallMode) == Update
        set StartLabel = UpgradeSoftware
    else-Ifstr(i) $(!NTN_InstallMode) == configure
        ;
        ;   You cannot config the software component
        ;
        Debug-Output "Cannot configure the software."
        set Error = $(Warning1)
        set from = end
        set to = end
        goto nonfatalinfo
    else-Ifstr(i) $(!NTN_InstallMode) == bind
        set StartLabel = bindingadapter
    else
        set StartLabel = installadapter
        set OEM_ABANDON_SOFTWARE = {}
        set OEM_ABANDON_OPTIONS = {}
    endif

    set from = $(fatal)
    set to = $(fatal)
    goto $(StartLabel)

;-----------------------------------------------
; Installation Section
;-----------------------------------------------

installadapter = +
    ; detect date ; LIBHANDLE is undefined
    Shell "utility.inf" InstallSoftwareProduct "Microsoft" "Inetsrv" "oemnsvin.inf"
    set ISVersion = $($R1)
    set ISNetRule = $($R2)
    ifstr(i) $(!STF_PRODUCT) == "WINNT"
         set ProductTitle = $(FunctionWINNTTitle) 
         set ProductDescription = $(ProductSoftwareWINNTDescription)
         set ProductName = $(ProductTitle)
    else
         set ProductTitle = $(FunctionLANMANNTTitle)
         set ProductDescription = $(ProductSoftwareLANMANNTDescription)
         set ProductName = $(ProductTitle)
    endif
    set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),"service"},+
                       {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
                       {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
                       {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductTitle)},+
                       {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductDescription)},+
                       {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductName)},+
                       {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductOpSupport)}, +
                       {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}
    Shell  $(UtilityInf), AddValueList, $(ISVersion), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNSVNW.INF: ShellCode error."
        goto ShellCodeError
    endif

    set NewValueList = {{"InfOption",$(NoTitle),$(!REG_VT_SZ),"Inetsrv"}}
    Shell  $(UtilityInf), AddValueList, $(ISNetRule), $(NewValueList)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        Debug-Output "OEMNSVNW.INF: ShellCode error."
        goto ShellCodeError
    endif

    ifstr(i) $(!NTN_InstallPhase) == primary
        goto end
    endif

    ;
    ; caller inetins.exe and it will run setup
    ;
    ;
    ; first make sure we don't have inetstp.exe around first
    ;
    OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_SoftwareBase)"\Microsoft\INetStp" $(MAXIMUM_ALLOWED) BS_INetStp
    ifstr $(BS_INetStp) != $(KeyNull)
        ;
        ; display error message
        ;
        ifstr(i) $(!STF_PRODUCT) == "WINNT"
             set Error = $(Warning3Winnt)
        else
             set Error = $(Warning3LanmanNt)
        endif

        ;
        ; remove the software component
        ;
        Shell "utility.inf" RemoveSoftwareComponent "Microsoft" "Inetsrv" "FALSE"

        set from = end
        set to = end
        goto warning
    else
        ;
        ; call inetstp.exe up
        ;
        ifstr(i) $(!NTN_Origination) == "install"
            ifstr(i) $(!NTN_InstallPhase) == "secondary"
                ;
                ; display error message
                ;
                ifstr(i) $(!STF_PRODUCT) == "WINNT"
                     set Error = $(Warning4Winnt)
                else
                     set Error = $(Warning4LanmanNt)
                endif
        
                ;
                ; remove the software component
                ;
                Shell "utility.inf" RemoveSoftwareComponent "Microsoft" "Inetsrv" "FALSE"
        
                set from = end
                set to = end
                goto nonfatal
            endif
        endif

        set FWaitForProcess = 1
        RunProgram RC "" "" $(!STF_WINDOWSSYSPATH)"\inetins.exe"
        set FWaitForProcess = 0
        ifint $(RC) == 1
            ; user cancel
            Shell "utility.inf" RemoveSoftwareComponent "Microsoft" "Inetsrv" "FALSE"
        endif
    endif

    set CommonStatus = STATUS_NO_EFFECT
    goto successful


;-----------------------------------------------
; Configuration Section
;-----------------------------------------------
configureadapter = +
    goto end

;-----------------------------------------------
; Binding section
;-----------------------------------------------
bindingadapter =+
    ;
    goto end

;-----------------------------------------------
; Removeadapter section
;
;
;  Removal errors are ignored, since we want to
;  try to remove as much as possible.
;-----------------------------------------------

removeadapter = +
    ;
    ; called inetins.exe and it will run setup
    ;

    ;
    ; first make sure we have inetstp.exe around first
    ;
    OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_SoftwareBase)"\Microsoft\INetStp" $(MAXIMUM_ALLOWED) BS_INetStp
    ifstr $(BS_INetStp) == $(KeyNull)
        ;
        ; display error message
        ;
        ;ifstr(i) $(!STF_PRODUCT) == "WINNT"
        ;     set Error = $(Warning2Winnt)
        ;else
        ;     set Error = $(Warning2LanmanNt)
        ;endif

        ;
        ; just in case the registry tag is still around, remove it.
        ;
        Shell "utility.inf" RemoveSoftwareComponent "Microsoft" "Inetsrv" "FALSE"
        ;set from = end
        ;set to = end
        ;goto warning
        set CommonStatus = STATUS_NO_EFFECT
    else
        ;
        ; call inetstp.exe up
        ;

        ifstr(i) $(!NTN_InstallPhase) == primary
            goto end
        endif

        GetRegValue $(BS_INetStp),"InstallPath",InstallPath
        set FWaitForProcess = 1
        RunProgram RC "" "" *($(InstallPath),4)"\setup.exe" "/R"
        set FWaitForProcess = 0

        OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_SoftwareBase)"\Microsoft\INetStp" $(MAXIMUM_ALLOWED) INetStpKey
        ifstr $(INetStpKey) == $(KeyNull)
            Shell "utility.inf" RemoveSoftwareComponent "Microsoft" "Inetsrv" "FALSE"
        endif

    endif

    goto end

;-----------------------------------------------
; Upgrade Software section
;-----------------------------------------------

UpgradeSoftware = +

    ;
    ; Update description and op support
    ;
    ifstr(i) $(!STF_PRODUCT) == "WINNT"
         set ProductDescription = $(ProductSoftwareWINNTDescription)
    else
         set ProductDescription = $(ProductSoftwareLANMANNTDescription)
    endif
    OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyCurrentVersion

    Ifstr $(KeyCurrentVersion) != $(KeyNull)
        SetRegValue $(KeyCurrentVersion) {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductDescription)}
        SetRegValue $(KeyCurrentVersion) {OperationsSupport,$(NoTitle),$(!REG_VT_DWORD),$(ProductOpSupport)}
        CloseRegKey $(KeyCurrentVersion)
    endif

    goto end
    ;
    ; End of Upgrade Software
    ;

;
;  Escape hatches
;
successful = +
    goto end

;
; warning display
;
warning = +
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(to)
    else-ifstr(i) $($R1) == "CANCEL"
        goto $(from)
    else
;       Debug-Msg "Error Error Bad DLGEVENT"
        goto end
    endif


;
; non fatal error display
;
nonfatalinfo = +
    Set CommonStatus = STATUS_USERCANCEL
    Set Severity = STATUS
    goto nonfatalmsg
nonfatal = +
    Set Severity = NONFATAL
    goto nonfatalmsg
nonfatalmsg = +
    ifstr(i) $(Error) == ""
        Set Severity = NONFATAL
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), $(Severity), $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    ifstr(i) $($R1) == "OK"
        goto $(from)
    else
        goto "end"
    endif

;
;  Registry is broken
;
fatalregistry = +
    Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif
    set Error = $($R0)
    goto fatal
;
; fatal error display
;
fatal = +
    ifstr(i) $(Error) == ""
        Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
        ifint $($ShellCode) != $(!SHELL_CODE_OK)
            goto ShellCodeError
        endif
        set Error = $($R0)
    endif
    Ifint $(BillboardVisible) != 0
        Shell "subroutn.inf" PopBillboard
        Set BillboardVisible = 0
    Endif

    Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
    ifint $($ShellCode) != $(!SHELL_CODE_OK)
        goto ShellCodeError
    endif

   goto setfailed

;
;  Shelling error
;
ShellCodeError = +
    set DlgType      = "MessageBox"
    set STF_MB_TITLE = $(ShellCodeErrorTitle)
    set STF_MB_TEXT  = $(ShellCodeErrorText)
    set STF_MB_TYPE  = 1
    set STF_MB_ICON  = 3
    set STF_MB_DEF   = 1
    ui start "Error Message"
    goto setfailed

setfailed = +
    set CommonStatus = STATUS_FAILED
    ;
    ; If OEM_ABANDON_ON, we need to clean up the registry
    ;
    ifstr(i) $(OEM_ABANDON_ON) == TRUE
        set OEM_ABANDON_ON = FALSE
        goto removeadapter
    endif
    goto end

end = +
    goto term

term = +
    Return $(CommonStatus)



;***************************************************************
;  INSTALL SECTIONS
;***************************************************************
[Install-Option]
    set STF_VITAL = ""

    ifstr(i) $(AddCopy) == "YES"

        ;
        ; Add the files to the copy list
        ;
    endif

    ifstr(i) $(DoCopy) == "YES"

       ;
       ; Copy files in the copy list
       ;
       set !STF_NCPA_FLUSH_COPYLIST = TRUE
    endif

    ifstr(i) $(DoConfig) == "YES"
        ;
        ; Add product to registry
        ;
    endif

    Exit

[Install-Update]
   set STF_VITAL        = ""
   set STF_OVERWRITE    = "VERIFYSOURCEOLDER"
   ;set STF_VERSION     = "YES"

   Exit
